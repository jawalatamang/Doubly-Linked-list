class Node:
    def __init__(self,data):
        self.data = data
        self.nlink = None
        self.plink = None
        
class doublyLL:
    def __init__(self):
        self.head = None
        
    def print_LL(self):
        if self.head is None:
            print("Linked List is empty ! ")
        else:
            n = self.head
            while n.nlink is not None:
                n = n.nlink
            while n is not None:
                print(n.data)
                n = n.plink
                
    def insert_empty(self,data):
        if self.head is None:
            new_node = Node(data)
            self.head = new_node
        else:
            print("Linked list is not empty !")
            
    def add_begin(self,data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
        else:
            new_node.nlink = self.head
            self.head.plink = new_node
            self.head = new_node
            
    def add_end(self,data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
        else:
            n = self.head
            while n.nlink is not None:
                n = n.nlink
            n.nlink = new_node
            new_node.plink = n
            
    def add_after(self,data,x):
        if self.head is None:
            print("LL is empty !")
        else:
            n = self.head
            while n is not None:
                if x == n.data:
                    break
                n = n.nlink
            if n is None:
                print("Given Node is not present in DLL")
            else:
                new_node = Node(data)
                new_node.nlink = n.nlink
                new_node.plink = n
                if n.nlink is not None:
                    n.nlink.plink = new_node
                n.nlink = new_node
                
        
    def add_before(self,data,x):
        if self.head is None:
            print("LL is empty !")
        else:
            n = self.head
            while n is not None:
                if x== n.data:
                    break
                n = n.nlink
            if n is None:
                print("Given node is not present in DLL")
            else:
                new_node = Node(data)
                new_node.nlink = n
                new_node.plink = n.plink
                if n.plink is not None:
                    n.plink.nlink =  new_node
                else:
                    self.head = new_node
                n.plink = new_node    
    
            
dLL = doublyLL()
dLL.add_begin(10)
dLL.add_begin(20)
dLL.add_begin(30)

dLL.add_before(100,20)
dLL.print_LL()

                